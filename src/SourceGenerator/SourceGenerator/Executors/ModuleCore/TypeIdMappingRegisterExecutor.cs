using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Text;

namespace OpenModular.SourceGenerator.Executors.ModuleCore;

public class TypeIdMappingRegisterExecutor : IExecutor
{
    public void Execute(string moduleCode, GeneratorExecutionContext context)
    {
        // 查找所有继承了 TypedIdValueBase 的类
        var typedIdClasses = GetTypedIdClasses(context);

        if (typedIdClasses.Any())
        {
            // 生成映射代码
            var source = GenerateMappingSource(context, typedIdClasses, moduleCode);

            // 添加生成的源代码到编译中
            context.AddSource($"{moduleCode}TypeIdMappingRegister.g.cs", source);
        }
    }

    private List<INamedTypeSymbol> GetTypedIdClasses(GeneratorExecutionContext context)
    {
        var typedIdBaseType = context.Compilation.GetTypeByMetadataName("OpenModular.DDD.Core.Domain.Entities.TypedIdValueBase");
        var typedIdClasses = new List<INamedTypeSymbol>();

        foreach (var syntaxTree in context.Compilation.SyntaxTrees)
        {
            var semanticModel = context.Compilation.GetSemanticModel(syntaxTree);
            var root = syntaxTree.GetRoot();

            var classDeclarations = root.DescendantNodes().OfType<ClassDeclarationSyntax>();

            foreach (var classDeclaration in classDeclarations)
            {
                var classSymbol = semanticModel.GetDeclaredSymbol(classDeclaration) as INamedTypeSymbol;

                if (classSymbol != null && classSymbol.BaseType != null && classSymbol.BaseType.Equals(typedIdBaseType, SymbolEqualityComparer.Default))
                {
                    typedIdClasses.Add(classSymbol);
                }
            }
        }

        return typedIdClasses;
    }

    private string GenerateMappingSource(GeneratorExecutionContext context, List<INamedTypeSymbol> typedIdClasses, string moduleCode)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("using Mapster;");

        // 添加所有需要的命名空间
        var namespaces = typedIdClasses.Select(c => c.ContainingNamespace.ToDisplayString()).Distinct();
        foreach (var ns in namespaces)
        {
            sb.AppendLine($"using {ns};");
        }

        sb.AppendLine();

        // 动态生成命名空间
        var commonNamespace = context.Compilation.AssemblyName;
        sb.AppendLine($"namespace {commonNamespace}");
        sb.AppendLine("{");
        sb.AppendLine($"    public class {moduleCode}TypeIdMappingRegister : IRegister");
        sb.AppendLine("    {");
        sb.AppendLine("        public void Register(TypeAdapterConfig config)");
        sb.AppendLine("        {");

        foreach (var typedIdClass in typedIdClasses)
        {
            var className = typedIdClass.Name;
            sb.AppendLine($"            config.ForType<Guid, {className}>().MapWith(s => new {className}(s));");
            sb.AppendLine($"            config.ForType<{className}, Guid>().MapWith(s => s.Value);");
        }

        sb.AppendLine("        }");

        sb.AppendLine();

        sb.AppendLine("    }");
        sb.AppendLine("}");

        return sb.ToString();
    }
}